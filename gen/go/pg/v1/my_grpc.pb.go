// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generatedv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringsServiceClient is the client API for StringsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringsServiceClient interface {
	ToUpper(ctx context.Context, in *ToUpperRequest, opts ...grpc.CallOption) (*ToUpperResponse, error)
}

type stringsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStringsServiceClient(cc grpc.ClientConnInterface) StringsServiceClient {
	return &stringsServiceClient{cc}
}

func (c *stringsServiceClient) ToUpper(ctx context.Context, in *ToUpperRequest, opts ...grpc.CallOption) (*ToUpperResponse, error) {
	out := new(ToUpperResponse)
	err := c.cc.Invoke(ctx, "/pg.v1.StringsService/ToUpper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringsServiceServer is the server API for StringsService service.
// All implementations must embed UnimplementedStringsServiceServer
// for forward compatibility
type StringsServiceServer interface {
	ToUpper(context.Context, *ToUpperRequest) (*ToUpperResponse, error)
	mustEmbedUnimplementedStringsServiceServer()
}

// UnimplementedStringsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStringsServiceServer struct {
}

func (UnimplementedStringsServiceServer) ToUpper(context.Context, *ToUpperRequest) (*ToUpperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToUpper not implemented")
}
func (UnimplementedStringsServiceServer) mustEmbedUnimplementedStringsServiceServer() {}

// UnsafeStringsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringsServiceServer will
// result in compilation errors.
type UnsafeStringsServiceServer interface {
	mustEmbedUnimplementedStringsServiceServer()
}

func RegisterStringsServiceServer(s grpc.ServiceRegistrar, srv StringsServiceServer) {
	s.RegisterService(&StringsService_ServiceDesc, srv)
}

func _StringsService_ToUpper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToUpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringsServiceServer).ToUpper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pg.v1.StringsService/ToUpper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringsServiceServer).ToUpper(ctx, req.(*ToUpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StringsService_ServiceDesc is the grpc.ServiceDesc for StringsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pg.v1.StringsService",
	HandlerType: (*StringsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToUpper",
			Handler:    _StringsService_ToUpper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pg/v1/my.proto",
}
